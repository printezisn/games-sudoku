(function(){"use strict";var u=(l=>(l[l.EASY=0]="EASY",l[l.NORMAL=1]="NORMAL",l[l.HARD=2]="HARD",l[l.EMPTY=3]="EMPTY",l))(u||{}),h=(l=>(l[l.CREATE_NEW=0]="CREATE_NEW",l[l.SOLVE=1]="SOLVE",l))(h||{});const v=l=>{const o=[...l];for(let s=o.length-1;s>=0;s--){const n=Math.floor(Math.random()*(s+1)),e=o[n];o[n]=o[s],o[s]=e}return o},M={[u.EASY]:40,[u.NORMAL]:35,[u.HARD]:30,[u.EMPTY]:0},m=l=>({...l,actions:l.actions.map(o=>({...o})),cells:l.cells.map(o=>({...o,options:new Set(o.options)}))}),E=l=>{const o=Array(9).fill(null).map(()=>Array(10).fill(0)),s=Array(9).fill(null).map(()=>Array(10).fill(0)),n=Array(9).fill(null).map(()=>Array(10).fill(0));l.finished=!0;for(let e=0;e<l.cells.length;e++){const c=l.cells[e].value;if(!c)continue;const i=Math.floor(e/9),r=e%9,a=Math.floor(i/3)*3+Math.floor(r/3);o[i][c]++,s[r][c]++,n[a][c]++}for(let e=0;e<l.cells.length;e++){const c=l.cells[e],i=c.value,r=Math.floor(e/9),a=e%9,p=Math.floor(r/3)*3+Math.floor(a/3);c.options.clear();for(let t=1;t<=9;t++){const f=i===t?2:1;o[r][t]<f&&s[a][t]<f&&n[p][t]<f&&c.options.add(t)}c.hasError=i!=null&&!c.options.has(i),(c.hasError||i==null)&&(l.finished=!1)}},A=l=>{let o=-1;for(let n=0;n<l.cells.length;n++){const e=l.cells[n];e.value==null&&(o===-1||e.options.size<l.cells[o].options.size)&&(o=n)}if(o===-1)return E(l),l;const s=v(Array.from(l.cells[o].options));for(let n=0;n<s.length;n++){const e=Math.floor(o/9)*9,c=o%9,i=Math.floor(o/27)*27+Math.floor(c/3)*3,r=m(l);let a=!0;r.cells[o].value=s[n],r.cells[o].color=r.currentColor;for(let t=c;t<81+c&&a;t+=9)t!==o&&(r.cells[t].options.delete(s[n]),r.cells[t].options.size===0&&(a=!1));for(let t=e;t<e+9&&a;t++)t!==o&&(r.cells[t].options.delete(s[n]),r.cells[t].options.size===0&&(a=!1));for(let t=i;t<27+i&&a;t+=9)for(let f=t;f<t+3;f++)if(f!==o&&(r.cells[f].options.delete(s[n]),r.cells[f].options.size===0)){a=!1;break}if(!a)continue;const p=A(r);if(p)return p}return null},d=l=>{const o={cells:Array(81).fill(null).map(()=>({value:null,color:0,hasError:!1,initial:!1,options:new Set})),finished:!1,actions:[],currentColor:0};if(E(o),M[l]===0)return o;const s=A(o),n=v(s.cells);for(let e=0;e<n.length;e++)e<M[l]?(n[e].initial=!0,n[e].color=s.currentColor):n[e].value=null;return E(s),s};self.onmessage=l=>{const o=l.data;switch(o.type){case h.CREATE_NEW:{const s=d(o.difficulty);postMessage({...o,board:s});break}case h.SOLVE:{const s=A(o.board);postMessage({...o,board:s});break}}}})();
